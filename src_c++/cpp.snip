snippet   Main
abbr      template of main function
alias M
options head
    #pragma GCC target("avx2")
    #pragma GCC optimize("O3")
    #pragma GCC optimize("unroll-loops")
    #include<iostream>
    #include<cstdint>
    #include<cstddef>
    #include<vector>
    //#include<atcoder/all>
    //using namespace atcoder;
    using namespace std;
    using i32 = int_fast32_t;
    using i64 = int_fast64_t;
    using usize = size_t;
    using u32 = uint_fast32_t;
    using u64 = uint_fast64_t;
    using i128 = __int128_t;
    using u128 = __uint128_t;
    using ld = long double;
    template<typename T>
    using vec = vector<T>;
    #define rep(i, n) for (i64 i = 0; i < (i64)(n); ++i)
    #define all(a) (a).begin(),(a).end()
    #define rall(a) (a).rbegin(),(a).rend()
    #define len(hoge) (i64)((hoge).size())
    using P = pair<i64,i64>;
    template<class T, class S> ostream &operator<<(ostream &os, const pair<T,S> &p){
    os << p.first << " " << p.second;
    return os;
    }
    void solve(){
    }
    int main(){
    ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    }

snippet BelmanFord
abbr Bel
options head
    constexpr i64 INF = 1e18;
    class edge {
    public:
    i64 from, to, cost;
    };

    template<typename T>
    class Belman_Ford {
    public:
    vec<edge> G;
    vec<i64> dist;
    bool flag;
    vec<bool> negative;

    Belman_Ford(const T &v, const T &e) {//vは頂点の数、eは辺の数
        G.resize(e);
        dist.resize(v, INF);
        negative.resize(v, false);
    }

    void init(i64 loop, bool zero) {//グラフの初期化(入力),zeroはゼロスタートかどうか
        rep(i, loop) {
            i64 a, b, c;
            cin >> a >> b >> c;
            edge A = {a - (zero ? 0 : 1), b - (zero ? 0 : 1), c};
            G[i] = A;
        }
    }

    void belman_ford(i64 v, i64 e, i64 s) {
        dist[s] = 0;
        rep(i, v - 1) {
            rep(j, e) {
                if (dist[G[j].from] == INF)continue;
                if (dist[G[j].to] > dist[G[j].from] + G[j].cost)
                    dist[G[j].to] = dist[G[j].from] + G[j].cost;
            }
        }
        rep(i, v) {
            rep(j, e) {
                if (dist[G[j].to] == INF)continue;
                if (dist[G[j].to] > dist[G[j].from] + G[j].cost) {
                    dist[G[j].to] = dist[G[j].from] + G[j].cost;
                    negative[G[j].to] = 1;
                }
                if (negative[G[j].from] == true) {
                    negative[G[j].to] = 1;
                }
            }
        }
    }
    };



snippet erathostenes
alias erat
options head
    std::vector<int_fast32_t> prime;//実際に素数を小さい方から格納する配列。
    int_fast32_t sieve_cnt(int_fast32_t n){
    //n以下の整数に素数が何個あるかを返します。
    std::vector<bool> is_prime(n + 1,true);//この配列でtrueになっているindexの整数は素数。
    is_prime[0] = is_prime[1] = 0;
    for(int_fast32_t i = 2; i <= n; i++){
        if(is_prime[i]){
            prime.emplace_back(i);
            for(int_fast32_t j = 2 * i; j <= n; j+= i){
                is_prime[j] = false;
            }
        }
    }
    return prime.size();
    }

    std::vector<bool> sieve(int32_t n){
    //ふるい自体を返します。
    std::vector<bool> is_prime(n + 1,true);//この配列でtrueになっているindexの整数は素数。
    is_prime[0] = is_prime[1] = 0;
    for(int_fast32_t i = 2; i <= n; i++){
        if(is_prime[i]){
            prime.emplace_back(i);
            for(int_fast32_t j = 2 * i; j <= n; j+= i){
                is_prime[j] = false;
            }
        }
    }
    return is_prime;
    }

snippet Euler_Tour
alias euler
options head
    class Euler_Tour {
    public:
    std::vector<uint_fast64_t> euler_tour;
    std::vector<uint_fast64_t> begin, end;//[begin, end)の半開区間
    int_fast64_t n, k;

    Euler_Tour(const std::vector<std::vector<uint_fast64_t>> &g, uint_fast64_t v) : n(g.size()), k(0) {
        begin.resize(n, 0);
        end.resize(n , 0);
        depth.resize(n, 0);
        build(g, v, -1, 0);
    }

    void build(const std::vector<std::vector<uint_fast64_t>> &g, uint_fast64_t v, int_fast64_t par, uint_fast64_t d) {
        begin[v] = k++;
        euler_tour.emplace_back(v);
        for (auto to :g[v]) {
            if (to == par)continue;
            build(g, to, v, d + 1);
            depth[k] = d;
            euler_tour.emplace_back(v);
            k++;
        }
        end[v] = k;
    }
    };

snippet FFT
alias fft
options head
    class Fast_Fourier_Transform{
    static void dft(vector<complex<long double>> &a,int inverse) {
        i32 n = a.size();
        if(n == 1) return;
        i32 h = 0;
        for(i32 i = 0; (1 << i) < n; i++) h++;
        for(i32 i = 0; i < n; i++){
            int j = 0;
            for(int k = 0; k < h; k++) j |= (i >> k & 1) << (h - 1 - k);
            if(i < j)swap(a[i],a[j]);
        }

        for(i32 i = 1; i < n; i *= 2){
            for(int j = 0; j < i; j++){
                complex<long double> zeta = polar(1.0,inverse * acos(-1) * j * 2 / (2 * i));
                for(i32 k = 0; k < n; k += 2 * i){
                    complex<long double> s = a[j + k],t = a[j + k + i] * zeta;
                    a[j + k] += t;
                    a[j + k + i] = s - t;
                }
            }
        }
    }
    public:
    template<typename T>
    static vector<T> convolve(vector<T> f, vector<T> g){

        i64 sz = 1;
        while(sz < f.size() + g.size()) sz *= 2;
        vector<complex<long double>> nf(sz),ng(sz);
        for(i32 i = 0; i < f.size(); i++){
            nf[i] = f[i];
            ng[i] = g[i];
        }
        dft(nf,1);
        dft(ng,1);
        vector<T> res(sz);
        for(i32 i = 0; i < sz ; i++) nf[i] = nf[i] * ng[i];
        dft(nf,-1);
        for(i32 i = 0; i < sz; i++){
            res[i] = round(nf[i].real() / sz);
        }
        return res;
    }
    };
    using FFT = Fast_Fourier_Transform;

snippet Kruskal
alias kruskal
options head
    template <typename T>
    class UnionFind
    {
    public:
    vector<T> par;
    UnionFind(T n) : par(n, -1) {}
    void init(T n)
    {
        for (usize i = 0; i < n; i++)
        {
            par[i] = -1;
        }
    }

    i64 root(T x)
    {
        if (par[x] < 0)
            return x;
        else
            return par[x] = root(par[x]);
    }

    bool same(T x, T y)
    {
        return root(x) == root(y);
    }

    bool merge(T x, T y)
    {
        x = root(x);
        y = root(y);
        if (x == y)
            return false;
        if (par[x] > par[y])
            swap(x, y);
        par[x] += par[y];
        par[y] = x;
        return true;
    }

    i64 size(T x)
    {
        return -par[root(x)];
    }
    };

    template<typename T>
    class edge{
    public:
    T from,to,cost;
    };

    template<typename T>
    T kruskal(vector<edge<T>> &edges,i64 V){
    sort(edges.begin(),edges.end(),[](const edge<T> &a,const edge<T> &b){
        return a.cost < b.cost;
    });
    UnionFind uft(V);
    T res = 0;
    for(edge<T> &e : edges){
        if(!(uft.same(e.a,e.b))){
            uft.merge(e.a,e.b);
            res += e.cost;
        }
    }
    return res;
    }

snippet LCA
alias lca
options head
    //
    // Created by chicken1925 on 2021/01/22.
    //

    template<typename T>
    class LCA {
    public:
    vector<int_fast32_t> depth;
    const int_fast32_t dig;
    vector<vector<int_fast32_t>> g;
    vector<vector<int_fast32_t>> cost;
    vector<int_fast32_t> costs;
    int_fast32_t n;
    vector<vector<int_fast32_t>> doubling;

    LCA(int_fast64_t _n) : n(_n),dig(64){
        doubling.assign(dig, vector<int_fast32_t>(n, -1));
        costs.resize(n);
        depth.resize(n);
        g.resize(n);
        cost.resize(n);
    }

    void addedge(int_fast32_t u, int_fast32_t v, int_fast32_t c = 0) {
        g[u].emplace_back(v);
        cost[u].emplace_back(c);
        g[v].emplace_back(u);
        cost[v].emplace_back(c);

    }

    void dfs(int_fast32_t now, int_fast32_t par = -1, int_fast32_t d = 0, int_fast32_t c = 0) {
        doubling[0][now] = par;
        depth[now] = d;
        costs[now] = c;
        rep(i, len(g[now])) {
            if (g[now][i] != par)dfs(g[now][i], now, d + 1, c + cost[now][i]);
        }
    }

    void construct() {
        dfs(0);
        for (int_fast32_t i = 0; i < dig - 1; i++) {
            for (int_fast32_t j = 0; j < doubling[i].size(); j++) {
                if (doubling[i][j] == -1)doubling[i + 1][j] = -1;
                else doubling[i + 1][j] = doubling[i][doubling[i][j]];
            }
        }
    }

    int_fast32_t query_answer(int_fast32_t u, int_fast32_t v) {
        if (depth[u] > depth[v])swap(u, v);
        for (int_fast32_t i = dig - 1; 0 <= i; i--) {
            if (((depth[v] - depth[u]) >> i) & 1) v = doubling[i][v];
        }
        if (u == v) return u;
        for (int_fast32_t i = dig - 1; 0 <= i; --i) {
            if (doubling[i][u] != doubling[i][v]) {
                u = doubling[i][u];
                v = doubling[i][v];
            }
        }
        return doubling[0][u];
    }

    int_fast32_t length(int_fast32_t u, int_fast32_t v) {
        return depth[u] + depth[v] - 2 * depth[query_answer(u, v)];
    }

    int_fast32_t dist(int_fast32_t u, int_fast32_t v) {
        return costs[u] + costs[v] - 2 * costs[query_answer(u, v)];
    }

    bool isOnPath(int_fast32_t u, int_fast32_t v, int_fast32_t x) {
        return length(u, x) + length(v, x) == length(u, v);
    }
    };

snippet MOD
alias mod
options head
    constexpr i64 MOD = 1000000007;


    template<i64 modulus>
    class modcal {
    public:
    i64 a;

    constexpr modcal(const i64 x = 0) noexcept: a(x % modulus) {}

    constexpr i64 &value() noexcept { return a; }

    constexpr const i64 &value() const noexcept { return a; }

    constexpr modcal operator+(const modcal rhs) const noexcept {
        return modcal(*this) += rhs;
    }

    constexpr modcal operator-(const modcal rhs) const noexcept {
        return modcal(*this) -= rhs;
    }

    constexpr modcal operator*(const modcal rhs) const noexcept {
        return modcal(*this) *= rhs;
    }

    constexpr modcal operator/(const modcal rhs) noexcept {
        return modcal(*this) /= rhs;
    }

    constexpr modcal &operator+=(const modcal rhs) noexcept {
        a += rhs.a;
        if (a >= modulus) {
            a -= modulus;
        }
        return *this;
    }

    constexpr modcal &operator-=(const modcal rhs) noexcept {
        if (a < rhs.a) {
            a += modulus;
        }
        a -= rhs.a;
        return *this;
    }

    constexpr modcal &operator*=(const modcal rhs) noexcept {
        a = a * rhs.a % modulus;
        return *this;
    }
    /*ostream &operator<<(ostream &os, const modcal<MOD> I){
        os << I.a;
        return os;
    }*/
    constexpr modcal &operator/=(modcal rhs) noexcept {
        i64 exp = modulus - 2;
        while (exp) {
            if (exp % 2) {
                *this *= rhs;
            }
            rhs *= rhs;
            exp /= 2;
        }
        return *this;
    }

    constexpr modcal<MOD> modpow(const modcal<MOD> &a, i64 n) {
        if (n == 0)
            return 1;
        auto t = modpow(a, n / 2);
        t = t * t;
        if (n & 1)
            t = t * a;
        return t;
    }

    };

    using modc = modcal<MOD>;
    class com {
    vector <modc> fac, inv;
    i64 n;
    public:
    com(i64 N) : fac(N + 1), inv(N + 1), n(N) {
        fac[0] = 1;
        for (i64 i = 1; i <= n; i++)fac[i] = fac[i - 1] * i;
        inv[n] = fac[n].modpow(fac[n], MOD - 2);
        for (i64 i = n; i >= 1; i--)inv[i - 1] = inv[i] * i;

    }

    modc combination(i64 n, i64 k) {
        if (k < 0 || k > n)return 0;
        return fac[n] * inv[k] * inv[n - k];
    }

    modc permutation(i64 n, i64 k) {
        if (k < 0 || k > n)return 0;
        return combination(n, k) * fac[k];
    }
    };
    istream &operator >> (istream &is,modc &x){
    i64 t;
    is >> t;
    x = t;
    return is;
    }
    ostream &operator << (ostream &os,const modc &x){
    os << x.a;
    return os;
    }

snippet Myseg
alias segmenttree
options head 
    /*
  i32 -> int_fast32_t
  i64 -> int_fast64_t
  u32 -> uint_fast32_t
  u64 -> uint_fast64_t
  usize -> size_t
 */
    template<typename T>
    T e(){
    }
    template<typename T>
    T op(T a,T b) {
    }
    template<class T,T (*op)(T,T),T (*e)()>
    class segtree{
    private:
    vec<T> node;
    u32 cnt = 0;
    usize sz;
    usize n;
    void update(usize k){
        node[k] = op(node[2 * k],node[2 * k + 1]);
    }
    public:
    segtree():segtree(0){}
    segtree(usize n): segtree(vec<T>(n,e())){}
    segtree(const vec<T> &a): n((u64)(a.size())){
        while(((u64)(1) << cnt) < n){
            cnt++;
        }
        sz = ((u64)(1) << cnt);
        node = vec<T>(2 * sz,e());
        rep(i,n){
            node[sz + i] = a[i];
        }
        for(u32 i = sz - 1; 1 <= i; i--){
            update(i);
        }
    }
    void set(u64 i,T x){
        i += sz;
        node[i] = x;
        for(u32 a = 1;a <= cnt; a++)update(i >> a);
    }
    T get(u64 i){
        return node[i + sz];
    }
    T prod(u64 l,u64 r){
        T resl = e();
        l += sz;
        r += sz;
        T resr = e();
        while(l < r){
            if(l & 1)resl = op(resl,node[l++]);
            if(r & 1)resr = op(resr,node[--r]);
            l >>= 1;
            r >>= 1;
        }
        return op(resl,resr);
    }
    T all_prod(){
        return node[1];
    }
    };

snippet UF
options head
    template <typename T>
    class UnionFind
    {
    public:
    vector<T> par;
    UnionFind(T n) : par(n, -1) {}
    void init(T n)
    {
        for (i64 i = 0; i < n; i++)
        {
            par[i] = -1;
        }
    }

    i64 root(T x)
    {
        if (par[x] < 0)
            return x;
        else
            return par[x] = root(par[x]);
    }

    bool same(T x, T y)
    {
        return root(x) == root(y);
    }

    bool merge(T x, T y)
    {
        x = root(x);
        y = root(y);
        if (x == y)
            return false;
        if (par[x] > par[y])
            swap(x, y);
        par[x] += par[y];
        par[y] = x;
        return true;
    }

    i64 size(T x)
    {
        return -par[root(x)];
    }
    };

snippet Warshall_Froyd
alias Warshall
options head
    void warshall_froyd(std::vector<std::vector<int_fast64_t>> &dist){//隣接行列を使う
    i64 n = dist.size();
    for(int_fast32_t k = 0; k < n; k++){
        for(int_fast32_t i = 0; i < n; i++){
            for(int_fast32_t j = 0; j < n; j++){
                dist[i][j] = min(dist[i][j],dist[i][k] + dist[k][j]);
            }
        }
    }
    }
    bool negative_cycle(std::vector<std::vector<int_fast64_t>> &dist){
    i64 n = dist.size();
    for(int_fast32_t i = 0; i < n; i++){
        if(dist[i][i] < 0)return true;
    }
    return false;
    }


snippet BIT
alias bit
options head
    template <typename T>
    class BIT {
    public:
    u64 n;
    vector<i64> seg;
    BIT(u64 n) : n(n){
        seg.resize(n + 1);
        fill_n(begin(seg),n + 1,0);
    }
    void add(i64 i, T x){
        ++i;
        while(i <= n) {
            seg[i] += x;
            i += i & (-i);
        }
    }
    //sum of [0,i);
    T sum(i64 i) {
        T s{0};
        while(i > 0) {
            s += seg[i];
            i -= i & (-i);
        }
        return s;
    }
    //sum of [a,b);
    T segsum(i64 a, i64 b) {
        return sum(b) - sum(a);
    }
    };

snippet cumsum2D
alias cum
options head
    //
    // Created by chicken1925 on 2021/01/24.
    //

    class CumulativeSum_2D {
    public:
    vec<vec<i64>> data;

    CumulativeSum_2D(i64 h, i64 w) : data(h + 1, vec<i64>(w + 1)) {}

    void add(i64 x, i64 y, i64 z) {
        x++, y++;
        if (y >= data.size() || x >= data[0].size())return;
        data[y][x] += z;
    }

    void build() {
        for (i32 i = 1; i < len(data); i++) {
            for (i32 j = 1; j < len(data[i]); j++) {
                data[i][j] += data[i -1][j] + data[i][j - 1] - data[i - 1][j - 1];
            }
        }
    }

    i64 query(i64 sy, i64 sx, i64 gy, i64 gx) {
        return data[gy][gx] - data[sy][gx] - data[gy][sx] + data[sy][sx];
    }
    };


snippet divisors
alias divi
options head 
    set<u64> enum_divisors(u64 n){
    set<u64> res;
    for(u64 i = 1; i <= sqrt(n); i++){
        if(n % i == 0){
            res.insert(i);
            if(n / i != i)
                res.insert(n / i);
        }
    }
    return res;
    }

    vector<u64> enum_divisors(u64 N) {
    vector<u64> res;
    for (u64 i = 1; i * i <= N; ++i) {
        if (N % i == 0) {
            res.push_back(i);
            if (N/i != i) res.push_back(N/i);
        }
    }
    sort(res.begin(), res.end());
    return res;
    }

    vector<P> factrize(u64 n)
    {
    vector<pair<u64, u64>> res;
    for (u64 i = 2; i <= sqrtl(n); i++)
    {
        u64 k = i;
        u64 cnt = 0;
        while (n % k == 0)
        {
            n /= k;
            cnt++;
        }
        res.emplace_back(k, cnt);
    }
    if (n != 1)
    {
        res.emplace_back(n, 1);
    }
    return res;
    }
    set<u64> factrize(u64 n)
    {
    set<u64> res;
    for (u64 i = 2; i <= sqrtl(n); i++)
    {
        u64 k = i;
        u64 cnt = 0;
        while (n % k == 0)
        {
            n /= k;
            res.insert(k);
        }
    }
    if (n != 1)
    {
        res.insert(n);
    }
    return res;
    }

snippet extgcd
options head
    i64 extgcd(i64 a,i64 b,i64 &x,i64 &y){
    i64 d = a;
    if(b){
        d = extgcd(b,a % b,y,x);
        y -= (a / b) * x;
    }else{
        x = 1,y = 0;
    }
    return d;
    }

snippet lowlink
options head
    class Lowlink{
    int_fast64_t k = 0;
    int_fast64_t n;
    public:
    std::vector<std::vector<int_fast64_t>> list;
    std::vector<std::vector<bool>> used_e;
    std::vector<int_fast64_t> ord,lowlink;
    std::vector<std::pair<int_fast64_t,int_fast64_t>> bridge;//橋
    std::vector<int_fast64_t>art;//関節点
    std::vector<int_fast64_t> used_v;
    Lowlink(std::vector<std::pair<int_fast64_t ,int_fast64_t>> &g,bool direction,int_fast64_t v):n(v){//directon = 1なら有向グラフ
        list.resize(n);
        used_v.resize(n,false);
        used_e.resize(n,std::vector<bool>(n,false));
        ord.resize(n),lowlink.resize(n);
        for(auto [from,to]:g){
            list[from].emplace_back(to);
            if(!direction)list[to].emplace_back(from);
        }
    }
    void dfs(int_fast64_t par,int_fast64_t now){
            used_v[now] = 1;
            ord[now] = lowlink[now] = k++;
            int_fast64_t cnt = 0;
            bool Art = false;
            for(auto v:list[now]){
                if(!used_v[v]){
                    used_e[now][v] = 1;
                    cnt++;
                    dfs(now,v);
                    lowlink[now] = min(lowlink[now],lowlink[v]);
                    if(par != -1 && ord[now] <= lowlink[v])Art = 1;
                    if(ord[now] < lowlink[v])bridge.emplace_back(make_pair(min(now,v),max(now,v)));
                }else if(!used_e[v][now]){//このとき(now,list[now][i])は後退辺
                    lowlink[now] = min(lowlink[now],ord[v]);
                }
            }
            if(par == -1 && cnt >= 2)Art = true;
            if(Art)art.emplace_back(now);
    }
    };

snippet phi
options head
    i64 phi(i64 n){
    i64 ret = n;
    for(i64 i = 2; i * i <= n; i++){
        if(n % i == 0){
            ret -= ret / i;
            while(n % i == 0)n /= i;
        }
    }
    if(n > 1)ret -= ret / n;
    return ret;
    }
